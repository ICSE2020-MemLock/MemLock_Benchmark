.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SWF::VideoStream 3"
.TH SWF::VideoStream 3 "2009-02-16" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SWF::VideoStream \- SWF Video class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use SWF::VideoStream;
\&        $videostream = new SWF::VideoStream("test.flv");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SWF::VideoStream is a helper class useful for playing videos via \s-1SWF\s0 applications,
either via embedded video data, or controlled by ActionScript.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$videostream = new SWF::VideoStream($filename)" 4
.el .IP "\f(CW$videostream\fR = new SWF::VideoStream($filename)" 4
.IX Item "$videostream = new SWF::VideoStream($filename)"
Creates a SWF::VideoStream object. If the file can't be opened the 
constructor will return an empty object. The filename is not limited
to 'flv' extension.
.ie n .IP "$frames\fR = \f(CW$videostream\fR\->\fIgetNumFrames()" 4
.el .IP "\f(CW$frames\fR = \f(CW$videostream\fR\->\fIgetNumFrames()\fR" 4
.IX Item "$frames = $videostream->getNumFrames()"
This method returns the number of video-frames of an object of SWF::VideoStream,
this works only for embedded streams. In case of error you will get result of \-1.
.ie n .IP "$videostream\->setDimension(width, height)" 4
.el .IP "\f(CW$videostream\fR\->setDimension(width, height)" 4
.IX Item "$videostream->setDimension(width, height)"
This method sets width and height for streamed videos,
this works only on streamed videos (progressive download or rtmp).
.ie n .IP "$bool\fR = \f(CW$videostream\fR\->\fIhasAudio()" 4
.el .IP "\f(CW$bool\fR = \f(CW$videostream\fR\->\fIhasAudio()\fR" 4
.IX Item "$bool = $videostream->hasAudio()"
A test whether the embedded \s-1FLV\s0 stream also has audio data.
.ie n .IP "$videostream\->setFrameMode($mode)" 4
.el .IP "\f(CW$videostream\fR\->setFrameMode($mode)" 4
.IX Item "$videostream->setFrameMode($mode)"
If the mode == \s-1SWFVIDEOSTREAM_MODE_AUTO\s0 (default) on every \s-1SWF\s0 movie frame a video
frame is added. In \s-1SWFVIDEOSTREAM_MODE_MANUAL\s0 mode, the user needs to call
the \fInextFrame()\fR method to change the video's frame. This works only with embedded video streams.
Does return the previous mode or \-1 if an invalid mode was passed.
.ie n .IP "$result\fR = \f(CW$videostream\fR\->\fInextFrame()" 4
.el .IP "\f(CW$result\fR = \f(CW$videostream\fR\->\fInextFrame()\fR" 4
.IX Item "$result = $videostream->nextFrame()"
Switch to next video frame. Works only with embedded video streams. Returns \-1 if an error happend.
Here follows some demo code how to use SWF::VideoStream objects (without ActionScript):
.Sp
.Vb 10
\&        use SWF qw(:ALL);                       # to be lazy
\&        $movie = new SWF::Movie();
\&        $movie\->setRate( 25 );
\&        # $movie\->setRate( 5 );                 # e.g. 5 for slow motion 
\&        # here movie set background etc. etc.
\&        #
\&        $video=new SWF::VideoStream(\*(AqMyTestVideo.flv\*(Aq);
\&        die if (\-1 == $v\->getNumFrames());      # abort if something went wrong
\&        #
\&        $video\->setFrameMode(SWF::Constants::SWFVIDEOSTREAM_MODE_MANUAL);
\&        $video\->seek(1000, 0);                  # for example only
\&        $displayitem = $movie\->add($video);
\&        #
\&        # 250 for a 10 seconds movie part (at rate of 25 per minute)
\&        for(my $n = 0; $n < 250; ++$n)  
\&        {
\&         $video\->nextFrame();
\&         $movie\->nextFrame();
\&        }
\&        $movie\->save("MyTestVideo.swf",9);
\&        # that\*(Aqs all, folks
.Ve
.ie n .IP "$result\fR = \f(CW$videostream\fR\->seek($frame, \f(CW$whence)" 4
.el .IP "\f(CW$result\fR = \f(CW$videostream\fR\->seek($frame, \f(CW$whence\fR)" 4
.IX Item "$result = $videostream->seek($frame, $whence)"
This functions allows seeking \f(CW$frame\fR in video stream, returning the old video frame position.
As value of \f(CW$whence\fR use one of the following:
.Sp
.Vb 3
\&        0 for seeking from beginning
\&        1 for seeking from current position
\&        2 for seeking from end of file
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\&        developers of ming 
\&        ming.sourceforge.net
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1SWF\s0, SWF::Action, SWF::Movie, SWF::MovieClip, SWF::Sound, SWF::SoundStream, SWF::Constants
