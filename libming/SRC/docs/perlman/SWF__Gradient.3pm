.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SWF::Gradient 3"
.TH SWF::Gradient 3 "2009-01-19" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SWF::Gradient \- SWF gradient class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&        use SWF::Gradient;
\&        use SWF::Constants qw(:Gradient);
\&        use SWF::Shape;
\&        $g = new SWF::Gradient();
\&        $g\->addEntry(0.0,255,0,0,200);
\&        $g\->addEntry(0.16,255,255,0,200);
\&        $g\->addEntry(0.32,0,255,0,200);
\&        $g\->addEntry(0.5,0,255,255,200);
\&        $g\->addEntry(0.66,0,50,255,200);
\&        $g\->addEntry(0.83 ,255,0,255,200);
\&        $g\->addEntry(1.0,255,0,0,200);
\&        # ..make some kind of rainbow..
\&        $sh = new SWF::Shape();
\&        $fill = $sh\->addGradientFill($g,SWFFILL_LINEAR_GRADIENT);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SWF::Gradient is a helper class most useful for filling shapes (i.e. SWF::Shape objects),
and also for filtering via SWF::DisplayItem methods using GradientGlowFilter or GradientBevelFilter,
both are SWF::Filter objects.
.SH "METHODS"
.IX Header "METHODS"
.IP "new \fISWF::Gradient()\fR" 4
.IX Item "new SWF::Gradient()"
Creates and returns a gradient object. This object is an 'empty' gradient, to be filled
with control point entries via up to 15 \fIaddEntry()\fR method calls. 
(For \s-1SWF\s0 version 7 are only 8 control points possible.)
For gradients used for filters also only 8 control points are possible.
.ie n .IP "addEntry($ratio, $r\fR, \f(CW$g\fR, \f(CW$b\fR [, \f(CW$a])" 4
.el .IP "addEntry($ratio, \f(CW$r\fR, \f(CW$g\fR, \f(CW$b\fR [, \f(CW$a\fR])" 4
.IX Item "addEntry($ratio, $r, $g, $b [, $a])"
Adds a gradient control point. The ratio parameter is a floating point value for 
controlling the position of the following RGBA-color value (consiting of red, green, 
blue and optional alpha parts) in an increasing row between 0.0 and 1.0 . 
Adding more than 15 entries will be useless and ignored.
.IP "setSpreadMode($mode)" 4
.IX Item "setSpreadMode($mode)"
For version >= 8 only: set a gradient spread mode: one of 
\&\s-1SWF_GRADIENT_PAD\s0 (default), \s-1SWF_GRADIENT_REPEAT\s0, \s-1SWF_GRADIENT_REFLECT\s0 .
.IP "setInterpolationMode($mode)" 4
.IX Item "setInterpolationMode($mode)"
For version >= 8 only: set a gradient interpolation mode: one of 
\&\s-1SWF_GRADIENT_NORMAL\s0 (default), \s-1SWF_GRADIENT_LINEAR\s0 .
.IP "setFocalPoint($focalpoint)" 4
.IX Item "setFocalPoint($focalpoint)"
Makes a focal gradient 'asymetric'. A focalpoint value of \-1.0 means the focal point 
is close to the left border, 0.0 is in the center and 1.0 is close to the right border.
Also this feature is available for version >= 8 only.  
For best results use the \s-1SWFFILL_FOCAL_GRADIENT\s0 flag when adding to v4 shapes, i.e. like
.Sp
.Vb 6
\&        $g = new SWF::Gradient();
\&        $g\->setFocalPoint(\-0.9);
\&        $g\->addEntry(0.000000,0xff,0x00,0x00,0xff);
\&        $g\->addEntry(1.000000,0x00,0xff,0x00,0xff);
\&        $shape\->useVersion(4);
\&        $shape\->addGradientFill($g,SWFFILL_FOCAL_GRADIENT);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\&        developers of 
\&        ming.sourceforge.net
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1SWF\s0, SWF::Shape, SWF::Fill, SWF::Filter, SWF::Constants
