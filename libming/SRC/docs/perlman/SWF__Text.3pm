.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SWF::Text 3"
.TH SWF::Text 3 "2009-01-05" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SWF::Text \- SWF Text class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use SWF::Text;
\&        $text = new SWF::Text();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Draw simple static texts.
.SH "NOTES:"
.IX Header "NOTES:"
.Vb 1
\&    None.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "new \fISWF::Text()\fR" 4
.IX Item "new SWF::Text()"
Creates a Text object.
.ie n .IP "$text\->addString($string)" 4
.el .IP "\f(CW$text\fR\->addString($string)" 4
.IX Item "$text->addString($string)"
.PD 0
.ie n .IP "$text\->addUTF8String($UTF8string)" 4
.el .IP "\f(CW$text\fR\->addUTF8String($UTF8string)" 4
.IX Item "$text->addUTF8String($UTF8string)"
.ie n .IP "$text\->addWideString($widestring,$widestring_len)" 4
.el .IP "\f(CW$text\fR\->addWideString($widestring,$widestring_len)" 4
.IX Item "$text->addWideString($widestring,$widestring_len)"
.PD
Writes the given \f(CW$string\fR into this Text object at the current pen position,
using the current font, height, spacing, and color:
.Sp
.Vb 3
\&        $t\->addString("Thai");
\&        $t\->addUTF8String("\ex{0E44}\ex{0E17}\ex{0E22}");
\&        $t\->addWideString("\ex{44}\ex{0E}\ex{17}\ex{0E}\ex{22}\ex{0E}",3);
.Ve
.ie n .IP "$text\->setColor(red, green, blue [, alpha])" 4
.el .IP "\f(CW$text\fR\->setColor(red, green, blue [, alpha])" 4
.IX Item "$text->setColor(red, green, blue [, alpha])"
Set the color of the text. An 8 bit value for each parameter. You can use 
he hex or decimal notation. Even mixed.
.Sp
.Vb 2
\&        $text\->setColor(0xcc,0,0x33);
\&        $text\->setColor(204,0,51,255);
.Ve
.ie n .IP "$text\->setFont($font)" 4
.el .IP "\f(CW$text\fR\->setFont($font)" 4
.IX Item "$text->setFont($font)"
Sets an SWF::Font object \-$font\- to be used in the Text.
.ie n .IP "$text\->setHeight($height)" 4
.el .IP "\f(CW$text\fR\->setHeight($height)" 4
.IX Item "$text->setHeight($height)"
Sets this Text object's current height to given height.
.ie n .IP "$text\fR\->moveTo($x, \f(CW$y)" 4
.el .IP "\f(CW$text\fR\->moveTo($x, \f(CW$y\fR)" 4
.IX Item "$text->moveTo($x, $y)"
Move the Text's location to ($x, \f(CW$y\fR).
.ie n .IP "$text\->setSpacing($spacing)" 4
.el .IP "\f(CW$text\fR\->setSpacing($spacing)" 4
.IX Item "$text->setSpacing($spacing)"
Sets this Text object's current letterspacing to given spacing.
.ie n .IP "$text\->getWidth($string)" 4
.el .IP "\f(CW$text\fR\->getWidth($string)" 4
.IX Item "$text->getWidth($string)"
.PD 0
.ie n .IP "$text\->getStringWidth($string)" 4
.el .IP "\f(CW$text\fR\->getStringWidth($string)" 4
.IX Item "$text->getStringWidth($string)"
.ie n .IP "$text\->getUTF8StringWidth($UTF8string)" 4
.el .IP "\f(CW$text\fR\->getUTF8StringWidth($UTF8string)" 4
.IX Item "$text->getUTF8StringWidth($UTF8string)"
.ie n .IP "$text\->getWideStringWidth($widestring)" 4
.el .IP "\f(CW$text\fR\->getWideStringWidth($widestring)" 4
.IX Item "$text->getWideStringWidth($widestring)"
.PD
Returns width of given string in pixels.
.ie n .IP "$text\fR\->\fIgetAscent()" 4
.el .IP "\f(CW$text\fR\->\fIgetAscent()\fR" 4
.IX Item "$text->getAscent()"
Returns the ascent of the current font at its current size, or 0 if not available.
.ie n .IP "$text\fR\->\fIgetDescent()" 4
.el .IP "\f(CW$text\fR\->\fIgetDescent()\fR" 4
.IX Item "$text->getDescent()"
Returns the descent of the current font at its current size, or 0 if not available.
.ie n .IP "$text\fR\->\fIgetLeading()" 4
.el .IP "\f(CW$text\fR\->\fIgetLeading()\fR" 4
.IX Item "$text->getLeading()"
Returns the leading of the current font at its current size, or 0 if not available.
.SH "AUTHOR"
.IX Header "AUTHOR"
developers of ming
ming.sourceforge.net
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1SWF\s0, SWF::Font, SWF::TextField, \s-1ISO\s0 10646 (Unicode)
