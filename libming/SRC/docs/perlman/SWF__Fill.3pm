.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SWF::Fill 3"
.TH SWF::Fill 3 "2009-01-21" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SWF::Fill \- SWF fill class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&        use SWF::Fill;
\&        usw SWF::Shape;
\&        $shape = new SWF::Shape();
\&        $fill = $shape\->addGradientFill($gradient,SWFFILL_LINEAR_GRADIENT);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
There is no object constructor because SWF::Fill objects are always returned by
method calls of SWF::Shape objects, like
.PP
.Vb 3
\&        $fill = $shape\->addSolidFill($r, $g, $b, $a);
\&        $fill = $shape\->addGradientFill($gradient, flags);
\&        $fill = $shape\->addBitmapFill($bitmap, $flag);
.Ve
.PP
You can now modify that SWF::Fill object using following methods.
.SH "NOTE"
.IX Header "NOTE"
None of the following methods is designed or useful for solid fill objects,
because it does not make any sense to rotate or scale a solid fill.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$fill\fR\->moveTo($x, \f(CW$y)" 4
.el .IP "\f(CW$fill\fR\->moveTo($x, \f(CW$y\fR)" 4
.IX Item "$fill->moveTo($x, $y)"
Move \f(CW$fill\fR to ($x, \f(CW$y\fR) in global co-ordinates.
.ie n .IP "$fill\->scaleTo($x [,$y])" 4
.el .IP "\f(CW$fill\fR\->scaleTo($x [,$y])" 4
.IX Item "$fill->scaleTo($x [,$y])"
Set \f(CW$fill\fR scale to \f(CW$x\fR in the x\-direction and \f(CW$y\fR in the y\-direction. 
If \f(CW$y\fR is not specified, \f(CW$y\fR=$x is assumed.
.ie n .IP "$fill\->scale($x [,$y])" 4
.el .IP "\f(CW$fill\fR\->scale($x [,$y])" 4
.IX Item "$fill->scale($x [,$y])"
Multiply \f(CW$fill\fR scale by \f(CW$x\fR in the x\-direction and \f(CW$y\fR in the y\-direction. 
If \f(CW$y\fR is not specified, \f(CW$y\fR=$x is assumed.
.ie n .IP "$fill\->rotateTo($degrees)" 4
.el .IP "\f(CW$fill\fR\->rotateTo($degrees)" 4
.IX Item "$fill->rotateTo($degrees)"
Set \f(CW$fill\fR rotation to \f(CW$degrees\fR.
.ie n .IP "$fill\->rotate($degrees)" 4
.el .IP "\f(CW$fill\fR\->rotate($degrees)" 4
.IX Item "$fill->rotate($degrees)"
Rotate \f(CW$fill\fR by \f(CW$degrees\fR.
.ie n .IP "$fill\->skewX($x)" 4
.el .IP "\f(CW$fill\fR\->skewX($x)" 4
.IX Item "$fill->skewX($x)"
Add \f(CW$x\fR to the current x\-skew.
.ie n .IP "$fill\->skewXTo($x)" 4
.el .IP "\f(CW$fill\fR\->skewXTo($x)" 4
.IX Item "$fill->skewXTo($x)"
Set x\-skew to \f(CW$x\fR. 1.0 is 45\-degree forward slant. 
More is more forward while less is more backward.
.ie n .IP "$fill\->skewY($y)" 4
.el .IP "\f(CW$fill\fR\->skewY($y)" 4
.IX Item "$fill->skewY($y)"
Add \f(CW$y\fR to the current y\-skew.
.ie n .IP "$fill\->skewYTo($y)" 4
.el .IP "\f(CW$fill\fR\->skewYTo($y)" 4
.IX Item "$fill->skewYTo($y)"
Set y\-skew to \f(CW$y\fR. 1.0 is 45\-degree upward slant. 
More is more upward while less is more downward.
.ie n .IP "$fill\fR\->setMatrix($a, \f(CW$b\fR, \f(CW$c\fR, \f(CW$d\fR, \f(CW$e\fR, \f(CW$f)" 4
.el .IP "\f(CW$fill\fR\->setMatrix($a, \f(CW$b\fR, \f(CW$c\fR, \f(CW$d\fR, \f(CW$e\fR, \f(CW$f\fR)" 4
.IX Item "$fill->setMatrix($a, $b, $c, $d, $e, $f)"
Do an operation of rotating/skewing (b,c), moving (e,f) and scaling (a,d) at once.
The default initial values of an SWF::Fill object's matrix are 1.0, 0, 0, 1.0, 0, 0 . 
So calling setMatrix with these defaults (\fIsetMatrix(1.0, 0, 0, 1.0, 0, 0);\fR)
will reset results of earlier calls of SWF::Fill methods (like rotate(45) etc. etc.)
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\&        developers of 
\&        ming.sourceforge.net
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1SWF\s0, SWF::Shape, SWF::DisplayItem, SWF::Constants
