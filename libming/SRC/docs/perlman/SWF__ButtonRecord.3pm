.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SWF::ButtonRecord 3"
.TH SWF::ButtonRecord 3 "2009-02-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SWF::ButtonRecord \- SWF Button Helper Class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&        use SWF::ButtonRecord;
\&        use SWF::Button;
\&        use SWF::Constants qw(:Button);
\&        # create button and a shape here..
\&        # and then:
\&        $buttonrecord = $button\->addCharacter($my_shape, SWFBUTTON_DOWN);
\&        $buttonrecord\->scale(0.5,0.5);
\&        $buttonrecord\->move(50,50);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Adding a character shape to an object of SWF::Button class will give you
access to an SWF::ButtonRecord object. This is useful for further changes
by using the declared methods below. So SWF::ButtonRecord objects are
a comparable counterpart to SWF::Displayitem objects. Just like them
there is no constructor method available.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$buttonRecord\fR\->moveTo($x, \f(CW$y)" 4
.el .IP "\f(CW$buttonRecord\fR\->moveTo($x, \f(CW$y\fR)" 4
.IX Item "$buttonRecord->moveTo($x, $y)"
Move ButtonRecord to ($x, \f(CW$y\fR).
.ie n .IP "$buttonRecord\fR\->move($x, \f(CW$y)" 4
.el .IP "\f(CW$buttonRecord\fR\->move($x, \f(CW$y\fR)" 4
.IX Item "$buttonRecord->move($x, $y)"
Displace ButtonRecord by ($x, \f(CW$y\fR).
.ie n .IP "$buttonRecord\->scaleTo($x ,$y)" 4
.el .IP "\f(CW$buttonRecord\fR\->scaleTo($x ,$y)" 4
.IX Item "$buttonRecord->scaleTo($x ,$y)"
Set ButtonRecord scale to \f(CW$x\fR in the x\-direction and \f(CW$y\fR in the y\-direction.
.ie n .IP "$buttonRecord\->scale($x ,$y)" 4
.el .IP "\f(CW$buttonRecord\fR\->scale($x ,$y)" 4
.IX Item "$buttonRecord->scale($x ,$y)"
Multiply ButtonRecord scale by \f(CW$x\fR in the x\-direction and \f(CW$y\fR in the y\-direction.
.ie n .IP "$buttonRecord\->rotateTo($degrees)" 4
.el .IP "\f(CW$buttonRecord\fR\->rotateTo($degrees)" 4
.IX Item "$buttonRecord->rotateTo($degrees)"
Set ButtonRecord rotation to \f(CW$degrees\fR.
.ie n .IP "$buttonRecord\->rotate($degrees)" 4
.el .IP "\f(CW$buttonRecord\fR\->rotate($degrees)" 4
.IX Item "$buttonRecord->rotate($degrees)"
Rotate ButtonRecord by \f(CW$degrees\fR.
.ie n .IP "$buttonRecord\->skewX($x)" 4
.el .IP "\f(CW$buttonRecord\fR\->skewX($x)" 4
.IX Item "$buttonRecord->skewX($x)"
Add \f(CW$x\fR to the current x\-skew.
.ie n .IP "$buttonRecord\->skewXTo($x)" 4
.el .IP "\f(CW$buttonRecord\fR\->skewXTo($x)" 4
.IX Item "$buttonRecord->skewXTo($x)"
Set x\-skew to \f(CW$x\fR. 1.0 is 45\-degree forward slant. More is more forward while less is more backward.
.ie n .IP "$buttonRecord\->skewY($y)" 4
.el .IP "\f(CW$buttonRecord\fR\->skewY($y)" 4
.IX Item "$buttonRecord->skewY($y)"
Add \f(CW$y\fR to the current y\-skew.
.ie n .IP "$buttonRecord\->skewYTo($y)" 4
.el .IP "\f(CW$buttonRecord\fR\->skewYTo($y)" 4
.IX Item "$buttonRecord->skewYTo($y)"
Set y\-skew to \f(CW$y\fR. 1.0 is 45\-degree upward slant. More is more upward while less is more downward.
.ie n .IP "$buttonRecord\->setDepth($depth)" 4
.el .IP "\f(CW$buttonRecord\fR\->setDepth($depth)" 4
.IX Item "$buttonRecord->setDepth($depth)"
Set Z\-order of ButtonRecord to \f(CW$depth\fR.
.ie n .IP "$buttonRecord\->setBlendMode($mode)" 4
.el .IP "\f(CW$buttonRecord\fR\->setBlendMode($mode)" 4
.IX Item "$buttonRecord->setBlendMode($mode)"
Set an alternative blend mode instead of default alpha blend.
Possible modes are \s-1SWFBLEND_MODE_NORMAL\s0, \s-1SWFBLEND_MODE_LAYER\s0 etc.
.ie n .IP "$buttonRecord\->addFilter($filter)" 4
.el .IP "\f(CW$buttonRecord\fR\->addFilter($filter)" 4
.IX Item "$buttonRecord->addFilter($filter)"
Process the ButtonRecord object thru a prepared filter:
an object of SWF::Filter class, e.g. BlurFilter or DropShadowFilter.
Filters are available since player version 8.
.SH "AUTHOR"
.IX Header "AUTHOR"
developers of ming 
ming.sourceforge.net,
Albrecht Kleine
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1SWF\s0, SWF::Button, SWF::DisplayItem, SWF::Filter, SWF::Movie, SWF::MovieClip
