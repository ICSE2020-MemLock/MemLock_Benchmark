.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SWF::Bitmap 3"
.TH SWF::Bitmap 3 "2009-01-28" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SWF::Bitmap \- Bitmap class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&        use SWF::Bitmap;
\&        $bitmap = new SWF::Bitmap(\*(Aqfilename\*(Aq);
\&        $fill = $shape\->addBitmapFill($bitmap);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SWF::Bitmap enables you to add \s-1JPG\s0 and \s-1DBL\s0 files.
It is a helper class most useful for filling shapes 
(i.e. SWF::Shape objects).
\&\s-1DBL\s0 files ('Define Bitmap Lossless') are produced from
\&\s-1PNG\s0 or \s-1GIF\s0 files by using png2dbl or gif2dbl tools.
.SH "METHODS"
.IX Header "METHODS"
.IP "new SWF::Bitmap($file, [$alpha])" 4
.IX Item "new SWF::Bitmap($file, [$alpha])"
Creates a new SWF::Bitmap object using 'file'. The file extension 
has to be one of \*(L".jpg\*(R",\*(L".jpeg\*(R" or \*(L".dbl\*(R" (not case sensitive). 
In all other cases use either \fInewSWFDBLBitmap()\fR or newSWFJpeg...()
constructors. The alpha parameter represents a filename for opacity
data ('alpha' channel), but only for \s-1JPG\s0 files.  Alpha data files
are produced by tool gif2mask. The original \s-1GIF\s0 used for gif2mask input
file containing alpha information should have same dimensions (width x height)
as the \s-1JPG\s0 file.
.IP "newSWFDBLBitmap SWF::Bitmap($file)" 4
.IX Item "newSWFDBLBitmap SWF::Bitmap($file)"
Creates a new SWF::Bitmap object using \s-1DBL\s0 file. 
Use this constructor if you have a file with \s-1DBL\s0 data, 
but not with .dbl filename extension.
.IP "newSWFJpegBitmap SWF::Bitmap($file)" 4
.IX Item "newSWFJpegBitmap SWF::Bitmap($file)"
Creates a new SWF::Bitmap object using \s-1JPG\s0 file. 
Use this constructor if you have a file with \s-1JPG\s0 data, 
but not with .jpg or .jpeg filename extension.
.IP "newSWFJpegWithAlpha SWF::Bitmap($file,$alpha)" 4
.IX Item "newSWFJpegWithAlpha SWF::Bitmap($file,$alpha)"
Creates a new SWF::Bitmap object using \s-1JPG\s0 file similar \fInewSWFJpegBitmap()\fR
with additional opacity information in 'alpha' file. Use this constructor
if you have a file with \s-1JPG\s0 data, but not with .jpg or .jpeg filename extension
and if there is opacity information available in 'alpha' file.  
Alpha data files are produced by gif2mask tool. The original \s-1GIF\s0 file
containing alpha information used for gif2mask input should have same dimensions
as the \s-1JPG\s0 file.
.ie n .IP "$width\fR = \f(CW$bitmap\fR\->\fIgetWidth();" 4
.el .IP "\f(CW$width\fR = \f(CW$bitmap\fR\->\fIgetWidth()\fR;" 4
.IX Item "$width = $bitmap->getWidth();"
Returns width of bitmap in pixels.
.ie n .IP "$height\fR = \f(CW$bitmap\fR\->\fIgetHeight();" 4
.el .IP "\f(CW$height\fR = \f(CW$bitmap\fR\->\fIgetHeight()\fR;" 4
.IX Item "$height = $bitmap->getHeight();"
Returns height of bitmap in pixels.
.SH "AUTHOR"
.IX Header "AUTHOR"
Soheil Seyfaie (soheil@netcom.ca) and
developers of ming.sourceforge.net
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1SWF\s0, SWF::Fill, SWF::Shape, SWF::Button, SWF::Constants, png2dbl, gif2dbl, gif2mask
