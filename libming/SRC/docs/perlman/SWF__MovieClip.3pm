.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SWF::MovieClip 3"
.TH SWF::MovieClip 3 "2009-02-10" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SWF::MovieClip \- MovieClip Class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use SWF::MovieClip;
\&        my $movieclip = new SWF::MovieClip();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SWF::MovieClip allows you to add animated objects to your Flash movies.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$mc\fR= new \fISWF::MovieClip()" 4
.el .IP "\f(CW$mc\fR= new \fISWF::MovieClip()\fR" 4
.IX Item "$mc= new SWF::MovieClip()"
Returns an SWF::MovieClip object.
.ie n .IP "$item\fR = \f(CW$mc\->add($swfobject)" 4
.el .IP "\f(CW$item\fR = \f(CW$mc\fR\->add($swfobject)" 4
.IX Item "$item = $mc->add($swfobject)"
When you add following types of objects to the \f(CW$mc\fR they will return a SWF::DisplayItem:
.RS 4
.IP "SWF::Button" 4
.IX Item "SWF::Button"
.PD 0
.IP "SWF::PrebuiltClip (a whole external swf file)" 4
.IX Item "SWF::PrebuiltClip (a whole external swf file)"
.IP "SWF::MovieClip (you can nest them like a tree)" 4
.IX Item "SWF::MovieClip (you can nest them like a tree)"
.IP "SWF::Shape" 4
.IX Item "SWF::Shape"
.IP "SWF::Text" 4
.IX Item "SWF::Text"
.IP "SWF::TextField" 4
.IX Item "SWF::TextField"
.IP "SWF::VideoStream" 4
.IX Item "SWF::VideoStream"
.RE
.RS 4
.PD
.Sp
[ToDo: to be verified: 
When you add a SWF::Sound the return value is a SWF::SoundInstance:
\&\f(CW$si\fR = \f(CW$mc\fR\->add($sound); ]
.RE
.ie n .IP "$si\fR = \f(CW$mc\->startSound($sound)" 4
.el .IP "\f(CW$si\fR = \f(CW$mc\fR\->startSound($sound)" 4
.IX Item "$si = $mc->startSound($sound)"
Starts making noise and returns an object of SWF::SoundInstance class.
.ie n .IP "$mc\->stopSound($sound)" 4
.el .IP "\f(CW$mc\fR\->stopSound($sound)" 4
.IX Item "$mc->stopSound($sound)"
Stops sound started by \fIstartSound()\fR method.
.ie n .IP "$mc\->remove($di)" 4
.el .IP "\f(CW$mc\fR\->remove($di)" 4
.IX Item "$mc->remove($di)"
Removes SWF::DisplayItem \f(CW$di\fR from the display list.
.ie n .IP "$mc\fR\->\fInextFrame()" 4
.el .IP "\f(CW$mc\fR\->\fInextFrame()\fR" 4
.IX Item "$mc->nextFrame()"
Move to the next frame in the timeline of SWF::MovieClip \f(CW$mc\fR
.ie n .IP "$mc\->setNumberOfFrames($i)" 4
.el .IP "\f(CW$mc\fR\->setNumberOfFrames($i)" 4
.IX Item "$mc->setNumberOfFrames($i)"
.PD 0
.ie n .IP "$mc\->setFrames($i)" 4
.el .IP "\f(CW$mc\fR\->setFrames($i)" 4
.IX Item "$mc->setFrames($i)"
.PD
Sets total number of \f(CW$mc\fR frames to \f(CW$i\fR
This is an optional autofiller, e.g. when you want to be sure that 2 different movieclips
have 100 frames when playing, but the number of \fInextFrame()\fR calls in these 2 movieclips is unknown or
dynamic (dependent on data from databases, whatever). By default a movieclip the number of frames
in the timeline is how often you called \f(CW$mc\fR\->nextFrame for this clip.
.ie n .IP "$mc\->labelFrame($name)" 4
.el .IP "\f(CW$mc\fR\->labelFrame($name)" 4
.IX Item "$mc->labelFrame($name)"
Sets frame name to \f(CW$name\fR.
You are then able to access this frame by name in ActionScript, not just by frame number.
.ie n .IP "$mc\fR\->setScalingGrid($x, \f(CW$y\fR, \f(CW$w\fR, \f(CW$h)" 4
.el .IP "\f(CW$mc\fR\->setScalingGrid($x, \f(CW$y\fR, \f(CW$w\fR, \f(CW$h\fR)" 4
.IX Item "$mc->setScalingGrid($x, $y, $w, $h)"
This function (available from \s-1SWF\s0>=8) sets a 9 slice scaling grid:
1 2 3 
4 5 6 
7 8 9
X, y, w and h define a rectangle, which is the dimension of the center slice
(5). All other slices are determined out of the characters bounds and the
defined rect. While slice 5 is scaled vertical and horizontal, slice 2 and 8
are only scaled horizontal. Slice 4 and 6 only vertical. The 4 corner slices
are not scaled (1, 3, 7, 9).
[ToDo: to be verified]
.ie n .IP "$mc\fR\->\fIremoveScalingGrid()" 4
.el .IP "\f(CW$mc\fR\->\fIremoveScalingGrid()\fR" 4
.IX Item "$mc->removeScalingGrid()"
Removes scaling grid rectangles.
.ie n .IP "$mc\->addInitAction($action)" 4
.el .IP "\f(CW$mc\fR\->addInitAction($action)" 4
.IX Item "$mc->addInitAction($action)"
Adds an initial ActionScript block to MovieClip \f(CW$mc\fR.
These actions are executed before the MovieClip is available
as a script object.
[ToDo: to be verified]
.ie n .IP "$mc\fR\->setSoundStream($sound, \f(CW$rate, [$skip])" 4
.el .IP "\f(CW$mc\fR\->setSoundStream($sound, \f(CW$rate\fR, [$skip])" 4
.IX Item "$mc->setSoundStream($sound, $rate, [$skip])"
Includes streaming sound to a movie. 
[ToDo: add more doc and a demo here.]
.SH "AUTHOR"
.IX Header "AUTHOR"
Soheil Seyfaie (soheil@netcom.ca)
Peter Liscovius
.PP
see \s-1AUTHORS\s0 of ming distribution (ming.sf.net)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SWF::DisplayItem for how you can modify the instances in a SWF::MovieClip or SWF::Movie
\&\s-1SWF\s0, SWF::Action, SWF::InitAction, SWF::Button, SWF::Movie, 
SWF::Shape, SWF::Sound, SWF::SoundStream, SWF::Text, SWF::TextField, SWF::VideoStream
