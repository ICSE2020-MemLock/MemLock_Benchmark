.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SWF::DisplayItem 3"
.TH SWF::DisplayItem 3 "2009-02-16" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SWF::DisplayItem \- SWF DisplayItem class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&        use SWF::DisplayItem;
\&        $dispitem = $movie\->add($shape);
\&        $dispitem\->rotate(45);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When you place an \s-1SWF\s0 object (one of the types that can be seen with eyes by user) 
in a frame of a SWF::Movie or SWF::MovieClip, the return value will be
in a SWF::DisplayItem.
.PP
You can now modify that item in current and every following frames of the clip where you added the \s-1SWF\s0 object.
.PP
Further it is accessible by ActionScript too. 
Just give the DisplayItem a name with method setName($name) after you added the \s-1SWF\s0 object to a SWF::Movie or SWF::MovieClip
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$displayItem\fR\->moveTo($x, \f(CW$y);" 4
.el .IP "\f(CW$displayItem\fR\->moveTo($x, \f(CW$y\fR);" 4
.IX Item "$displayItem->moveTo($x, $y);"
Move \f(CW$displayItem\fR to ($x, \f(CW$y\fR) in global co-ordinates.
.ie n .IP "$displayItem\fR\->move($x, \f(CW$y);" 4
.el .IP "\f(CW$displayItem\fR\->move($x, \f(CW$y\fR);" 4
.IX Item "$displayItem->move($x, $y);"
Displace \f(CW$displayItem\fR by ($x, \f(CW$y\fR)
.ie n .IP "$displayItem\->scaleTo($x [,$y]);" 4
.el .IP "\f(CW$displayItem\fR\->scaleTo($x [,$y]);" 4
.IX Item "$displayItem->scaleTo($x [,$y]);"
Set \f(CW$displayItem\fR scale to \f(CW$x\fR in the x\-direction and \f(CW$y\fR in the y\-direction. If \f(CW$y\fR is not specified, \f(CW$y\fR=$x is assumed.
.ie n .IP "$displayItem\->scale($x [,$y]);" 4
.el .IP "\f(CW$displayItem\fR\->scale($x [,$y]);" 4
.IX Item "$displayItem->scale($x [,$y]);"
Multiply \f(CW$displayItem\fR scale by \f(CW$x\fR in the x\-direction and \f(CW$y\fR in the y\-direction. If \f(CW$y\fR is not specified, \f(CW$y\fR=$x is assumed.
.ie n .IP "$displayItem\->rotateTo($degrees);" 4
.el .IP "\f(CW$displayItem\fR\->rotateTo($degrees);" 4
.IX Item "$displayItem->rotateTo($degrees);"
Set \f(CW$displayItem\fR rotation to \f(CW$degrees\fR.
.ie n .IP "$displayItem\->rotate($degrees);" 4
.el .IP "\f(CW$displayItem\fR\->rotate($degrees);" 4
.IX Item "$displayItem->rotate($degrees);"
Rotate \f(CW$displayItem\fR by \f(CW$degrees\fR.
.ie n .IP "$displayItem\->skewX($x);" 4
.el .IP "\f(CW$displayItem\fR\->skewX($x);" 4
.IX Item "$displayItem->skewX($x);"
Add \f(CW$x\fR to the current x\-skew.
.ie n .IP "$displayItem\->skewXTo($x);" 4
.el .IP "\f(CW$displayItem\fR\->skewXTo($x);" 4
.IX Item "$displayItem->skewXTo($x);"
Set x\-skew to \f(CW$x\fR. 1.0 is 45\-degree forward slant. More is more forward while less is more backward.
.ie n .IP "$displayItem\->skewY($y);" 4
.el .IP "\f(CW$displayItem\fR\->skewY($y);" 4
.IX Item "$displayItem->skewY($y);"
Add \f(CW$y\fR to the current y\-skew.
.ie n .IP "$displayItem\->skewYTo($y);" 4
.el .IP "\f(CW$displayItem\fR\->skewYTo($y);" 4
.IX Item "$displayItem->skewYTo($y);"
Set y\-skew to \f(CW$y\fR. 1.0 is 45\-degree upward slant. More is more upward while less is more downward.
.ie n .IP "$displayItem\fR\->setMatrix($a, \f(CW$b\fR, \f(CW$c\fR, \f(CW$d\fR, \f(CW$e\fR, \f(CW$f)" 4
.el .IP "\f(CW$displayItem\fR\->setMatrix($a, \f(CW$b\fR, \f(CW$c\fR, \f(CW$d\fR, \f(CW$e\fR, \f(CW$f\fR)" 4
.IX Item "$displayItem->setMatrix($a, $b, $c, $d, $e, $f)"
Do an operation of rotating/skewing (b,c), moving (e,f) and scaling (a,d) at once.
The default initial values of an SWF::DisplayItem object's matrix are 1.0, 0, 0, 1.0, 0, 0 . 
So calling setMatrix with these defaults (\fIsetMatrix(1.0, 0, 0, 1.0, 0, 0);\fR)
will reset results of earlier calls of SWF::DisplayItem methods (like rotate(45) etc. etc.)
.ie n .IP "$displayItem\->setDepth($depth);" 4
.el .IP "\f(CW$displayItem\fR\->setDepth($depth);" 4
.IX Item "$displayItem->setDepth($depth);"
Set Z\-order of \f(CW$displayItem\fR to \f(CW$depth\fR.
.ie n .IP "$displayItem\->setRatio($ratio);" 4
.el .IP "\f(CW$displayItem\fR\->setRatio($ratio);" 4
.IX Item "$displayItem->setRatio($ratio);"
Useful for SWF::Morph. Sets \f(CW$displayItem\fR ratio to \f(CW$ratio\fR.
.ie n .IP "$displayItem\fR\->setColorAdd($r, \f(CW$g\fR, \f(CW$b [,$a]))" 4
.el .IP "\f(CW$displayItem\fR\->setColorAdd($r, \f(CW$g\fR, \f(CW$b\fR [,$a]))" 4
.IX Item "$displayItem->setColorAdd($r, $g, $b [,$a]))"
.PD 0
.ie n .IP "$displayItem\fR\->addColor($r, \f(CW$g\fR, \f(CW$b [,$a]);" 4
.el .IP "\f(CW$displayItem\fR\->addColor($r, \f(CW$g\fR, \f(CW$b\fR [,$a]);" 4
.IX Item "$displayItem->addColor($r, $g, $b [,$a]);"
.PD
Add \s-1RGB\s0 color to the \f(CW$displayItem\fR's color transform. Default value of \f(CW$a\fR is 1.0
.ie n .IP "$displayItem\fR\->setColorMult($r, \f(CW$g\fR, \f(CW$b [,$a]))" 4
.el .IP "\f(CW$displayItem\fR\->setColorMult($r, \f(CW$g\fR, \f(CW$b\fR [,$a]))" 4
.IX Item "$displayItem->setColorMult($r, $g, $b [,$a]))"
.PD 0
.ie n .IP "$displayItem\fR\->multColor($r, \f(CW$g\fR, \f(CW$b [,$a]);" 4
.el .IP "\f(CW$displayItem\fR\->multColor($r, \f(CW$g\fR, \f(CW$b\fR [,$a]);" 4
.IX Item "$displayItem->multColor($r, $g, $b [,$a]);"
.PD
Multiplies the \f(CW$displayItem\fR's color transform by the given values. Default value of \f(CW$a\fR is 1.0
.ie n .IP "$displayItem\->setName($name);" 4
.el .IP "\f(CW$displayItem\fR\->setName($name);" 4
.IX Item "$displayItem->setName($name);"
Set \f(CW$displayItem\fR's name to \f(CW$name\fR (used for targetting with SWF::Action).
.ie n .IP "$displayItem\fR\->\fIremove();" 4
.el .IP "\f(CW$displayItem\fR\->\fIremove()\fR;" 4
.IX Item "$displayItem->remove();"
Remove \f(CW$displayItem\fR from the movie display list.
.ie n .IP "($x, $y\fR) = \f(CW$displayItem\->getPosition(();" 4
.el .IP "($x, \f(CW$y\fR) = \f(CW$displayItem\fR\->getPosition(();" 4
.IX Item "($x, $y) = $displayItem->getPosition(();"
Returns displace coordinates of \f(CW$displayitem\fR.
.ie n .IP "$degrees\fR = \f(CW$displayItem\fR\->\fIgetRotation();" 4
.el .IP "\f(CW$degrees\fR = \f(CW$displayItem\fR\->\fIgetRotation()\fR;" 4
.IX Item "$degrees = $displayItem->getRotation();"
Returns rotation of \f(CW$displayItem\fR.
.ie n .IP "($x, $y\fR) = \f(CW$displayItem\fR\->\fIgetScale();" 4
.el .IP "($x, \f(CW$y\fR) = \f(CW$displayItem\fR\->\fIgetScale()\fR;" 4
.IX Item "($x, $y) = $displayItem->getScale();"
Returns scale of \f(CW$displayItem\fR in x\- and y\-direction.
.ie n .IP "($x, $y\fR) = \f(CW$displayItem\fR\->\fIgetSkew();" 4
.el .IP "($x, \f(CW$y\fR) = \f(CW$displayItem\fR\->\fIgetSkew()\fR;" 4
.IX Item "($x, $y) = $displayItem->getSkew();"
Returns x\- and y\-skew of \f(CW$displayItem\fR.
.ie n .IP "$depth\fR = \f(CW$displayItem\fR\->\fIgetDepth();" 4
.el .IP "\f(CW$depth\fR = \f(CW$displayItem\fR\->\fIgetDepth()\fR;" 4
.IX Item "$depth = $displayItem->getDepth();"
Returns Z\-order of \f(CW$displayItem\fR.
.ie n .IP "$displayItem\->setMask($level);" 4
.el .IP "\f(CW$displayItem\fR\->setMask($level);" 4
.IX Item "$displayItem->setMask($level);"
Sets a mask level: display items with lower or equal depth are masked, 
any other display items are not masked. 
Use \fIsetDepth()\fR to control desired masking.
.ie n .IP "$displayItem\fR\->\fIendMask()" 4
.el .IP "\f(CW$displayItem\fR\->\fIendMask()\fR" 4
.IX Item "$displayItem->endMask()"
End masking started by prior \fIsetMask()\fR call.
.ie n .IP "$displayItem\fR\->addAction( \f(CW$action\fR, \f(CW$flags )" 4
.el .IP "\f(CW$displayItem\fR\->addAction( \f(CW$action\fR, \f(CW$flags\fR )" 4
.IX Item "$displayItem->addAction( $action, $flags )"
Add \f(CW$action\fR, an object of SWF::Action class.
The flags are exported from SWF::Constants.
.Sp
.Vb 9
\&        SWFACTION_ONLOAD
\&        SWFACTION_ENTERFRAME
\&        SWFACTION_UNLOAD
\&        SWFACTION_MOUSEMOVE
\&        SWFACTION_MOUSEDOWN
\&        SWFACTION_MOUSEUP
\&        SWFACTION_KEYDOWN
\&        SWFACTION_KEYUP
\&        SWFACTION_DATA
.Ve
.Sp
Using this flags you have control at which events the action will run.
.ie n .IP "$displayItem\->setBlendMode($mode)" 4
.el .IP "\f(CW$displayItem\fR\->setBlendMode($mode)" 4
.IX Item "$displayItem->setBlendMode($mode)"
Set an alternative blend mode instead of default alpha blend.
Possible modes are \s-1SWFBLEND_MODE_NORMAL\s0, \s-1SWFBLEND_MODE_LAYER\s0 etc.
.ie n .IP "$displayItem\->cacheAsBitmap($flag)" 4
.el .IP "\f(CW$displayItem\fR\->cacheAsBitmap($flag)" 4
.IX Item "$displayItem->cacheAsBitmap($flag)"
Set a flag (value 0 or 1) showing the character can be cached as a bitmap. 
This might improve rendering speed, if the object does no change often.
This feature is available for \s-1SWF\s0 version >= 8 only.
.ie n .IP "$displayItem\fR\->\fIflush()" 4
.el .IP "\f(CW$displayItem\fR\->\fIflush()\fR" 4
.IX Item "$displayItem->flush()"
Writes the SWF::DisplayItem object immediately to the blocklist.
Usually \s-1MING\s0 waits with writing a display item until a frame is closed
through a \fInextFrame()\fR call, because a display items state could be altered 
for the current frame. By using the \fIflush()\fR method \s-1MING\s0 does not wait 
and writes the frame immediately. Therefore an user can influence the 
swf tag order. Changing a display items state after calling \fIflush()\fR takes 
effect in the next frame.
.ie n .IP "$matrix\fR = \f(CW$displayItem\fR\->\fIgetMatrix()" 4
.el .IP "\f(CW$matrix\fR = \f(CW$displayItem\fR\->\fIgetMatrix()\fR" 4
.IX Item "$matrix = $displayItem->getMatrix()"
Returns an associated SWF::Matrix object.
.ie n .IP "$character\fR = \f(CW$displayItem\fR\->\fIgetCharacter()" 4
.el .IP "\f(CW$character\fR = \f(CW$displayItem\fR\->\fIgetCharacter()\fR" 4
.IX Item "$character = $displayItem->getCharacter()"
Returns the associated SWF::Character object.
.ie n .IP "$displayItem\fR\->addFilter( \f(CW$filter )" 4
.el .IP "\f(CW$displayItem\fR\->addFilter( \f(CW$filter\fR )" 4
.IX Item "$displayItem->addFilter( $filter )"
Process the DisplayItem object thru a prepared filter:
an object of SWF::Filter class, e.g. BlurFilter or DropShadowFilter.
Filters are available since player version 8.
.ie n .IP "$displayItem\fR\->setCXform( \f(CW$cxform )" 4
.el .IP "\f(CW$displayItem\fR\->setCXform( \f(CW$cxform\fR )" 4
.IX Item "$displayItem->setCXform( $cxform )"
Process the DisplayItem object thru \f(CW$cxform:\fR a prepared color 
transformation object of SWF::CXform class.
.SH "AUTHOR"
.IX Header "AUTHOR"
Soheil Seyfaie (soheil \s-1AT\s0 users.sourceforge.net)
Peter Liscovius
Albrecht Kleine
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1SWF\s0, SWF::Button, SWF::Movie, SWF::MovieClip, SWF::Shape, SWF::Text, SWF::TextField,
SWF::Filter, SWF::CXform, SWF::Matrix, SWF::Action, SWF::Morph, SWF::Character,
SWF::Constants
